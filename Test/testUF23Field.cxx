/** @file testUF23Field.cxx

    @brief  simple (non-exhaustive) test of functionality of UF23Field class
    @return 0 upon success

*/

#include "../UF23Field.h"
#include <iostream>
#include <iomanip>
using namespace std;

bool
CloseTo(const double a, const double b, const double relTol = 1e-6) {
  return std::abs(a - b) <= relTol * std::max(std::abs(a), std::abs(b));
}

bool
CloseTo(const Vector3 a, const Vector3 b, const double relTol = 1e-6) {
  return
    CloseTo(a.x, b.x, relTol) &&
    CloseTo(a.y, b.y, relTol) &&
    CloseTo(a.z, b.z, relTol);
}

vector<vector<Vector3>> getReferenceValues();

int
main(const int /*argc*/, const char** /*argv*/)
{
  const vector<UF23Field::ModelType> models =
    {
     UF23Field::base, UF23Field::neCL, UF23Field::expX, UF23Field::spur,
     UF23Field::cre10, UF23Field::synCG, UF23Field::twistX, UF23Field::nebCor
    };

  const vector<Vector3> testPositions =
    {
     {1, 1, 1}, {0, 0, -8}, {0.1, -0.1, -8}, {0.1, 0.1, 0.1}, {-1, 3, 4},
     {-10, -3, 2}, {-10, -10, 20}, {-4, -2, 1}, {6, 5, -0.1}
    };

  const vector<vector<Vector3>> referenceValues = getReferenceValues();

  const bool verbose = false;

  for (unsigned int i = 0; i < models.size(); ++i) {
    const auto& model = models[i];
    cout << " " << UF23Field::GetModelName(model) << " ..." << flush;
    const UF23Field uf23Field(model);
    if (verbose)
       cout << "------------------- " << model << endl;
    for (unsigned int j = 0; j < testPositions.size(); ++j) {
      const auto& position = testPositions[j];
      const auto val = uf23Field(position);
      const auto& refVal = referenceValues[i][j];
      if (verbose)
        cout << "{" << scientific << setprecision(8) << val << "}," << endl;
      if (!CloseTo(val, refVal)) {
        cerr << "(" << val << ") not close to (" << refVal << ")" << endl;
        return 1;
      }
    }
    cout << " ok" << endl;
  }
  cout << " ==> test of UF23Field successful " << endl;
  return 0;
}

vector<vector<Vector3>>
getReferenceValues()
{
  vector<vector<Vector3>> retVal;
  retVal.push_back({
                    {-1.46860417e+00, 1.64555489e+00, 8.35702311e-01},
                    {0.00000000e+00, -4.22433497e-01, 1.83232985e-01},
                    {-3.00239177e-01, -2.97045767e-01, 1.83232985e-01},
                    {8.58382023e-04, 7.71891049e-03, 9.71705527e-01},
                    {-1.17276875e+00, -2.33013590e-01, 4.10798494e-01},
                    {2.63883569e-01, -8.79631081e-01, 5.54229961e-06},
                    {-1.71971907e-02, -2.00291358e-02, 4.16024875e-02},
                    {6.18960813e-01, -2.14437026e+00, 8.35702315e-01},
                    {-1.50883911e+00, 2.63874909e+00, 1.16578928e-02}
    });
  retVal.push_back({
                    {-1.39447625e+00, 1.57135437e+00, 8.65163870e-01},
                    {0.00000000e+00, -4.44318027e-01, 1.54430718e-01},
                    {-3.15695875e-01, -3.12652066e-01, 1.54430718e-01},
                    {2.09678202e-03, 2.63832916e-03, 9.81077691e-01},
                    {-1.08603376e+00, -1.86359136e-01, 3.91730436e-01},
                    {2.11095801e-01, -7.04082667e-01, 8.86591950e-05},
                    {-1.38087843e-02, -1.52011002e-02, 3.06842086e-02},
                    {5.76543516e-01, -2.03544911e+00, 8.65163870e-01},
                    {-3.77778745e-01, 6.89644787e-01, 5.85347897e-02},
    });
  retVal.push_back({
                    {-1.04170166e+00, 1.93212739e+00, 2.95362499e+00},
                    {0.00000000e+00, -5.87995638e-01, 4.66925506e-01},
                    {-4.20802701e-01, -4.10291633e-01, 4.59557272e-01},
                    {7.79982996e-03, 1.50482351e-02, 5.50337531e+00},
                    {-1.34639246e+00, 6.80103301e-02, 8.60002649e-01},
                    {1.37242004e-01, -8.67085225e-01, 1.25106474e-01},
                    {-1.69325979e-02, -2.95454738e-02, 4.72616404e-02},
                    {4.53873303e-01, -2.03292501e+00, 9.95205454e-01},
                    {-1.30599234e+00, 2.25151057e+00, 2.56704152e-01},
    });
  retVal.push_back({
                    {-1.45840221e+00, 1.64227817e+00, 8.41586777e-01},
                    {0.00000000e+00, -6.98341816e-01, 1.84323895e-01},
                    {-4.95342500e-01, -4.92154113e-01, 1.84323895e-01},
                    {-5.27533653e-03, 1.48965596e-02, 9.86107885e-01},
                    {-1.47472798e+00, -3.33905274e-01, 4.11265918e-01},
                    {2.31202234e-01, -7.70722755e-01, 1.12129423e-05},
                    {-1.54200071e-02, -2.22012150e-02, 4.22733003e-02},
                    {5.92201401e-01, -2.10378256e+00, 8.41586782e-01},
                    {4.05057122e-03, -9.76673905e-03, 8.24321504e-03},
    });
  retVal.push_back({
                    {-1.50595160e+00, 1.67869437e+00, 8.29806168e-01},
                    {0.00000000e+00, -2.27289811e-01, 1.86869632e-01},
                    {-1.62291024e-01, -1.59076795e-01, 1.86869632e-01},
                    {6.71536463e-04, 7.88990042e-03, 9.63291786e-01},
                    {-9.35561196e-01, -1.55840707e-01, 4.13609050e-01},
                    {2.68120686e-01, -8.93743434e-01, 3.48927149e-06},
                    {-1.88291055e-02, -1.94245715e-02, 4.29970299e-02},
                    {6.50804557e-01, -2.18817590e+00, 8.29806172e-01},
                    {-1.58450595e+00, 2.77817014e+00, 1.10336683e-02},
    });
  retVal.push_back({
                    {-1.33098823e+00, 1.49556466e+00, 6.88642986e-01},
                    {0.00000000e+00, -4.99342453e-01, 1.16143813e-01},
                    {-3.54225500e-01, -3.51947350e-01, 1.16143813e-01},
                    {2.14352986e-03, 3.57971370e-03, 8.05219599e-01},
                    {-1.15136627e+00, -2.48536546e-01, 2.95713475e-01},
                    {1.18057505e-01, -3.98308301e-01, 9.11299352e-04},
                    {-1.06899006e-02, -1.12335952e-02, 2.33358311e-02},
                    {5.61264936e-01, -1.94601963e+00, 6.88642987e-01},
                    {-1.18200258e+00, 2.01179003e+00, 8.02453884e-02},
    });
  retVal.push_back({
                    {-3.65508814e-01, 4.74456797e-01, 5.76165841e-01},
                    {0.00000000e+00, 0.00000000e+00, 6.36668108e-02},
                    {-3.68784336e-03, -2.20689056e-03, 6.36668108e-02},
                    {-5.03208784e-02, 5.09887480e-02, 6.27665021e-01},
                    {-4.04821314e-01, -1.01426396e-02, 2.06022291e-01},
                    {-2.34287239e-02, -9.72536117e-02, 2.80624948e-02},
                    {-4.42698169e-03, -6.23429869e-03, 1.07555956e-02},
                    {3.25022555e-01, -1.18950549e+00, 5.76163734e-01},
                    {-8.65217092e-01, 1.85270104e+00, 3.73913202e-01},
    });
  retVal.push_back({
                    {-1.92580231e+00, 2.17134243e+00, 1.13723929e+00},
                    {0.00000000e+00, -4.73261099e-01, 2.65974345e-01},
                    {-3.36780079e-01, -3.32368900e-01, 2.65974345e-01},
                    {-5.24558924e-04, 1.51886238e-02, 1.33757258e+00},
                    {-1.47213976e+00, -2.82203258e-01, 5.71920142e-01},
                    {3.54206333e-01, -1.18108962e+00, 1.00077423e-04},
                    {-2.67268842e-02, -2.88588605e-02, 6.38364561e-02},
                    {7.90570955e-01, -2.84039611e+00, 1.13723931e+00},
                    {-1.97316856e+00, 3.44153600e+00, 3.20266742e-02},
    });
  return retVal;
}
